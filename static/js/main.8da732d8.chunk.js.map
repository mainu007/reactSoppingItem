{"version":3,"sources":["component/Counter.jsx","component/Counters.jsx","component/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","className","this","getBadgeClasses","formatValue","onClick","props","onIncrement","data","onDecrement","onDelete","id","classes","value","Component","Counters","Fragment","onReset","onAdditem","map","val","key","Navbar","newData","filter","href","length","App","state","handleIncrement","obj","index","indexOf","setState","handleDecrement","handleDelete","handleAddItem","newItem","Date","now","push","handleReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8da732d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Counter extends Component {\n  render() {\n    return (\n      <div className=\"my-1\">\n        <span className={this.getBadgeClasses()}>{this.formatValue()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.data)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDecrement(this.props.data)}\n          className=\"btn btn-sm btn-warning ml-2\"\n        >\n          Decrement\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.data.id)}\n          className=\"btn btn-danger btn-sm mx-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.data.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n  formatValue() {\n    const { value } = this.props.data;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n","import React, { Component } from \"react\";\nimport Counter from \"./Counter\";\n\nexport default class Counters extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <button onClick={this.props.onReset} className=\"btn btn-sm btn-primary m-2\">Reset</button>\n        <button onClick={this.props.onAdditem} className=\"btn btn-sm btn-success\">Add</button>\n        {this.props.data.map(val=>{\n          return (\n            <Counter key={val.id} data={val} onIncrement={this.props.onIncrement} onDelete={this.props.onDelete} onDecrement={this.props.onDecrement} />\n          )\n        })}\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nconst Navbar = (props) => {\n    const {data} = props;\n    const newData = data.filter(val=>val.value > 0);\n  return (\n    <React.Fragment>\n      <nav className=\"navbar navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Total items\n        </a>\n        <span className=\"mr-auto badge badge-secondary\">\n            {newData.length===0?null: newData.length}\n        </span>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Counters from \"./component/Counters\";\nimport Navbar from \"./component/Navbar\";\n\nexport default class App extends Component {\n  state = {\n    data: [\n      { id: 1, value: 1 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n  handleIncrement = (obj) => {\n    const data = [...this.state.data];\n    const index = data.indexOf(obj);\n    data[index].value++;\n    this.setState({ data });\n  };\n  handleDecrement = (obj) => {\n    if (obj.value !== 0) {\n      const data = this.state.data.map((val) => {\n        if (val.id === obj.id) {\n          val.value--;\n        }\n        return val;\n      });\n      this.setState({ data });\n    }\n  };\n  handleDelete = (id) => {\n    const data = this.state.data.filter((val) => val.id !== id);\n    this.setState({ data });\n  };\n  handleAddItem = () => {\n    let { data } = this.state;\n    const newItem = { id: Date.now(), value: 0 };\n    data.push(newItem);\n    this.setState({ data });\n  };\n  handleReset = () => {\n    const data = this.state.data.map((val) => {\n      val.value = 0;\n      return val;\n    });\n    this.setState({ data });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar data={this.state.data} />\n        <Counters\n          onReset={this.handleReset}\n          onDelete={this.handleDelete}\n          onIncrement={this.handleIncrement}\n          data={this.state.data}\n          onDecrement={this.handleDecrement}\n          onAdditem={this.handleAddItem}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}